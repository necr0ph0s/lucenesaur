// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Desktop/github/lucenesaur/src/main/java/io/github/rajat19/analysis/indic/IndicTokenizerImpl.jflex

package io.github.rajat19.tokenizers;

/**
 * Adapted from Lucene 2.4.1's StandardTokenizerImpl.jflex.
 * <p>
 * The following changes have been made:
 * <p>
 * - added IRREGULAR_WORD definitions for things like "C++", "C#", "A+", etc
 * - removed the special HOST pattern for hostnames
 * - changed the COMPANY pattern to begin with "{LETTER}*" instead of "{ALPHA}"
 * so we treat company names like "@home" as one token without losing the "@"
 * - removed the ACRONYM_DEP pattern
 * - Additional support for Indian languages
 */

import io.github.rajat19.constants.TokenizerConstants;
import org.apache.lucene.analysis.Token;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class IndicTokenizerImpl {

    /** This character denotes the end of file. */
    public static final int YYEOF = -1;
    // Lexical states.
    public static final int YYINITIAL = 0;
    public static final int ALPHANUM = TokenizerConstants.ALPHANUM;
    public static final int APOSTROPHE = TokenizerConstants.APOSTROPHE;
    public static final int ACRONYM = TokenizerConstants.ACRONYM;
    public static final int COMPANY = TokenizerConstants.COMPANY;
    public static final int EMAIL = TokenizerConstants.EMAIL;
    public static final int NUM = TokenizerConstants.NUM;
    public static final int IRREGULAR_WORD = TokenizerConstants.IRREGULAR_WORD;
    public static final int TRAILING_AT = TokenizerConstants.TRAILING_AT;
    public static final int INDIC_WORD = TokenizerConstants.INDIC_WORD;
    public static final int HINDI_WORD = TokenizerConstants.HINDI_WORD;
    public static final int CJ_WORD = TokenizerConstants.CJ_WORD;
    public static final String[] TOKEN_TYPES = TokenizerConstants.TOKEN_IMAGE;
    /** Initial size of the lookahead buffer. */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 0
    };
    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300" +
                    "\1\u2400\1\u1f00\1\u2500\31\u2600\1\u2700\121\u2600\1\u2800\4\u0100" +
                    "\1\u2900\1\u0100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00" +
                    "\53\u0100\1\u3000\10\u3100\31\u1f00\1\u2600\1\u3200\1\u3300\1\u0100" +
                    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u1f00\1\u3800\1\u3900\1\u3a00" +
                    "\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100" +
                    "\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800" +
                    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00" +
                    "\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700" +
                    "\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00" +
                    "\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\27\u1f00\1\u6000" +
                    "\1\u6100\1\u6200\1\u6300\11\u1f00\1\u6400\1\u6500\5\u1f00\1\u6600" +
                    "\1\u6700\4\u1f00\1\u6800\21\u1f00\246\u0100\1\u6900\20\u0100\1\u6a00" +
                    "\1\u6b00\25\u0100\1\u6c00\34\u0100\1\u6d00\14\u1f00\2\u0100\1\u6e00" +
                    "\u0e05\u1f00";
    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();
    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\12\0\1\1\1\2\1\0\1\3\25\0\1\4\2\0" +
                    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13" +
                    "\1\11\12\14\6\0\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\17\1\25\2\17\1\26\1\17" +
                    "\1\27\1\30\2\17\1\31\2\17\1\32\1\17\1\33" +
                    "\1\34\2\17\4\0\1\35\1\6\1\36\1\17\1\20" +
                    "\2\17\1\23\2\17\1\37\4\17\1\40\11\17\1\41" +
                    "\2\17\12\0\1\2\44\0\1\17\11\0\1\6\1\17" +
                    "\4\0\1\17\5\0\27\17\1\0\37\17\1\0\u01ca\17" +
                    "\4\0\14\17\16\0\5\17\7\0\1\17\1\0\1\17" +
                    "\201\0\5\17\1\0\2\17\2\0\4\17\1\0\1\17" +
                    "\6\0\1\17\1\0\3\17\1\0\1\17\1\0\24\17" +
                    "\1\0\123\17\1\0\213\17\10\0\246\17\1\0\46\17" +
                    "\2\0\1\17\6\0\51\17\107\0\33\17\4\0\4\17" +
                    "\55\0\53\17\25\0\12\14\4\0\2\17\1\0\143\17" +
                    "\1\0\1\17\17\0\2\17\7\0\2\17\12\14\3\17" +
                    "\2\0\1\17\20\0\1\17\1\0\36\17\35\0\131\17" +
                    "\13\0\1\17\16\0\12\14\41\17\11\0\2\17\4\0" +
                    "\1\17\5\0\26\17\4\0\1\17\11\0\1\17\3\0" +
                    "\1\17\27\0\31\17\7\0\13\17\65\0\25\17\1\0" +
                    "\10\17\102\0\144\42\2\0\12\14\20\42\146\43\12\14" +
                    "\166\43\12\14\166\43\12\14\166\43\12\14\166\43\12\14" +
                    "\166\43\12\14\166\43\12\14\166\43\12\14\20\43\5\0" +
                    "\22\17\3\0\30\17\1\0\11\17\1\0\1\17\2\0" +
                    "\7\17\37\0\12\14\21\0\60\17\1\0\2\17\14\0" +
                    "\7\17\11\0\12\14\47\0\2\17\1\0\1\17\1\0" +
                    "\5\17\1\0\30\17\1\0\1\17\1\0\12\17\1\0" +
                    "\2\17\11\0\1\17\2\0\5\17\1\0\1\17\11\0" +
                    "\12\14\2\0\4\17\40\0\1\17\37\0\12\14\26\0" +
                    "\10\17\1\0\44\17\33\0\5\17\163\0\53\17\24\0" +
                    "\1\17\12\14\6\0\6\17\4\0\4\17\3\0\1\17" +
                    "\3\0\2\17\7\0\3\17\4\0\15\17\14\0\1\17" +
                    "\1\0\12\14\6\0\46\17\1\0\1\17\5\0\1\17" +
                    "\2\0\53\17\1\0\115\17\1\0\4\17\2\0\7\17" +
                    "\1\0\1\17\1\0\4\17\2\0\51\17\1\0\4\17" +
                    "\2\0\41\17\1\0\4\17\2\0\7\17\1\0\1\17" +
                    "\1\0\4\17\2\0\17\17\1\0\71\17\1\0\4\17" +
                    "\2\0\103\17\45\0\20\17\20\0\126\17\2\0\6\17" +
                    "\3\0\u016c\17\2\0\21\17\1\0\32\17\5\0\113\17" +
                    "\6\0\10\17\7\0\15\17\1\0\4\17\16\0\22\17" +
                    "\16\0\22\17\16\0\15\17\1\0\3\17\17\0\64\17" +
                    "\43\0\1\17\4\0\1\17\3\0\12\14\46\0\12\14" +
                    "\6\0\131\17\7\0\5\17\2\0\42\17\1\0\1\17" +
                    "\5\0\106\17\12\0\37\17\47\0\12\14\36\17\2\0" +
                    "\5\17\13\0\54\17\4\0\32\17\6\0\12\14\46\0" +
                    "\27\17\11\0\65\17\53\0\12\14\6\0\12\14\15\0" +
                    "\1\17\135\0\57\17\21\0\7\17\4\0\12\14\51\0" +
                    "\36\17\15\0\2\17\12\14\54\17\32\0\44\17\34\0" +
                    "\12\14\3\0\3\17\12\14\44\17\2\0\11\17\7\0" +
                    "\53\17\2\0\3\17\51\0\4\17\1\0\6\17\1\0" +
                    "\2\17\3\0\1\17\5\0\300\17\100\0\26\17\2\0" +
                    "\6\17\2\0\46\17\2\0\6\17\2\0\10\17\1\0" +
                    "\1\17\1\0\1\17\1\0\1\17\1\0\37\17\2\0" +
                    "\65\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0" +
                    "\7\17\3\0\4\17\2\0\6\17\4\0\15\17\5\0" +
                    "\3\17\1\0\7\17\33\0\2\6\16\0\2\2\107\0" +
                    "\1\17\15\0\1\17\20\0\15\17\145\0\1\17\4\0" +
                    "\1\17\2\0\12\17\1\0\1\17\3\0\5\17\6\0" +
                    "\1\17\1\0\1\17\1\0\1\17\1\0\4\17\1\0" +
                    "\13\17\2\0\4\17\5\0\5\17\4\0\1\17\64\0" +
                    "\2\17\u017b\0\57\17\1\0\57\17\1\0\205\17\6\0" +
                    "\4\17\3\0\2\17\14\0\46\17\1\0\1\17\5\0" +
                    "\1\17\2\0\70\17\7\0\1\17\20\0\27\17\11\0" +
                    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0" +
                    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\120\0" +
                    "\1\17\325\0\2\17\52\0\5\17\5\0\2\17\3\0" +
                    "\360\44\1\0\136\17\21\0\33\17\65\0\220\44\200\0" +
                    "\u01c0\44\100\0\u0100\44\215\17\103\0\56\17\2\0\15\17" +
                    "\3\0\20\17\12\14\2\17\24\0\57\17\20\0\37\17" +
                    "\2\0\106\17\61\0\11\17\2\0\147\17\2\0\65\17" +
                    "\2\0\5\17\60\0\13\17\1\0\3\17\1\0\4\17" +
                    "\1\0\27\17\35\0\64\17\16\0\62\17\34\0\12\14" +
                    "\30\0\6\17\3\0\1\17\1\0\2\17\1\0\12\14" +
                    "\34\17\12\0\27\17\31\0\35\17\7\0\57\17\34\0" +
                    "\1\17\12\14\6\0\5\17\1\0\12\17\12\14\5\17" +
                    "\1\0\51\17\27\0\3\17\1\0\10\17\4\0\12\14" +
                    "\6\0\27\17\3\0\1\17\3\0\62\17\1\0\1\17" +
                    "\3\0\2\17\2\0\5\17\2\0\1\17\1\0\1\17" +
                    "\30\0\3\17\2\0\13\17\7\0\3\17\14\0\6\17" +
                    "\2\0\6\17\2\0\6\17\11\0\7\17\1\0\7\17" +
                    "\1\0\53\17\1\0\14\17\10\0\163\17\15\0\12\14" +
                    "\6\0\244\17\14\0\27\17\4\0\61\17\4\0\u0100\2" +
                    "\u0100\44\7\17\14\0\5\17\5\0\1\17\1\0\12\17" +
                    "\1\0\15\17\1\0\5\17\1\0\1\17\1\0\2\17" +
                    "\1\0\2\17\1\0\154\17\41\0\153\17\22\0\100\17" +
                    "\2\0\66\17\50\0\14\17\164\0\5\17\1\0\207\17" +
                    "\6\0\1\4\2\0\1\5\4\0\1\45\4\0\12\14" +
                    "\6\0\1\5\32\17\6\0\32\17\12\0\73\44\37\17" +
                    "\3\0\6\17\2\0\6\17\2\0\6\17\2\0\3\17" +
                    "\43\0\14\17\1\0\32\17\1\0\23\17\1\0\2\17" +
                    "\1\0\17\17\2\0\16\17\42\0\173\17\205\0\35\17" +
                    "\3\0\61\17\57\0\40\17\15\0\24\17\1\0\10\17" +
                    "\6\0\46\17\12\0\36\17\2\0\44\17\4\0\10\17" +
                    "\60\0\236\17\2\0\12\14\6\0\44\17\4\0\44\17" +
                    "\4\0\50\17\10\0\64\17\234\0\67\17\11\0\26\17" +
                    "\12\0\10\17\230\0\6\17\2\0\1\17\1\0\54\17" +
                    "\1\0\2\17\3\0\1\17\2\0\27\17\12\0\27\17" +
                    "\11\0\37\17\101\0\23\17\1\0\2\17\12\0\26\17" +
                    "\12\0\32\17\106\0\70\17\6\0\2\17\100\0\1\17" +
                    "\17\0\4\17\1\0\3\17\1\0\35\17\52\0\35\17" +
                    "\3\0\35\17\43\0\10\17\1\0\34\17\33\0\66\17" +
                    "\12\0\26\17\12\0\23\17\15\0\22\17\156\0\111\17" +
                    "\67\0\63\17\15\0\63\17\15\0\44\17\14\0\12\14" +
                    "\306\0\35\17\12\0\1\17\10\0\26\17\232\0\27\17" +
                    "\14\0\65\17\56\0\12\14\23\0\55\17\40\0\31\17" +
                    "\7\0\12\14\11\0\44\17\17\0\12\14\4\0\1\17" +
                    "\13\0\43\17\3\0\1\17\14\0\60\17\16\0\4\17" +
                    "\13\0\12\14\1\17\1\0\1\17\43\0\22\17\1\0" +
                    "\31\17\124\0\7\17\1\0\1\17\1\0\4\17\1\0" +
                    "\17\17\1\0\12\17\7\0\57\17\21\0\12\14\13\0" +
                    "\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0" +
                    "\2\17\1\0\5\17\3\0\1\17\22\0\1\17\14\0" +
                    "\5\17\236\0\65\17\22\0\4\17\5\0\12\14\5\0" +
                    "\1\17\40\0\60\17\24\0\2\17\1\0\1\17\10\0" +
                    "\12\14\246\0\57\17\51\0\4\17\44\0\60\17\24\0" +
                    "\1\17\13\0\12\14\46\0\53\17\15\0\1\17\7\0" +
                    "\12\14\66\0\33\17\25\0\12\14\306\0\54\17\164\0" +
                    "\100\17\12\14\25\0\1\17\240\0\10\17\2\0\47\17" +
                    "\20\0\1\17\1\0\1\17\34\0\1\17\12\0\50\17" +
                    "\7\0\1\17\25\0\1\17\13\0\56\17\23\0\1\17" +
                    "\42\0\71\17\7\0\11\17\1\0\45\17\21\0\1\17" +
                    "\17\0\12\14\30\0\36\17\160\0\7\17\1\0\2\17" +
                    "\1\0\46\17\25\0\1\17\11\0\12\14\6\0\6\17" +
                    "\1\0\2\17\1\0\40\17\16\0\1\17\7\0\12\14" +
                    "\u0136\0\23\17\15\0\232\17\346\0\304\17\274\0\57\17" +
                    "\321\0\107\17\271\0\71\17\7\0\37\17\1\0\12\14" +
                    "\146\0\36\17\22\0\60\17\20\0\4\17\14\0\12\14" +
                    "\11\0\25\17\5\0\23\17\260\0\100\17\200\0\113\17" +
                    "\5\0\1\17\102\0\15\17\100\0\2\17\1\0\1\17" +
                    "\34\0\370\17\10\0\363\17\15\0\37\17\61\0\3\17" +
                    "\21\0\4\17\10\0\u018c\17\4\0\153\17\5\0\15\17" +
                    "\3\0\11\17\7\0\12\17\146\0\125\17\1\0\107\17" +
                    "\1\0\2\17\2\0\1\17\2\0\2\17\2\0\4\17" +
                    "\1\0\14\17\1\0\1\17\1\0\7\17\1\0\101\17" +
                    "\1\0\4\17\2\0\10\17\1\0\7\17\1\0\34\17" +
                    "\1\0\4\17\1\0\5\17\1\0\1\17\3\0\7\17" +
                    "\1\0\u0154\17\2\0\31\17\1\0\31\17\1\0\37\17" +
                    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17" +
                    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\10\17" +
                    "\2\0\62\14\55\17\12\0\7\17\2\0\12\14\4\0" +
                    "\1\17\u0171\0\54\17\4\0\12\14\6\0\305\17\73\0" +
                    "\104\17\7\0\1\17\4\0\12\14\246\0\4\17\1\0" +
                    "\33\17\1\0\2\17\1\0\1\17\2\0\1\17\1\0" +
                    "\12\17\1\0\4\17\1\0\1\17\1\0\1\17\6\0" +
                    "\1\17\4\0\1\17\1\0\1\17\1\0\1\17\1\0" +
                    "\3\17\1\0\2\17\1\0\1\17\2\0\1\17\1\0" +
                    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0" +
                    "\2\17\1\0\1\17\2\0\4\17\1\0\7\17\1\0" +
                    "\4\17\1\0\4\17\1\0\1\17\1\0\12\17\1\0" +
                    "\21\17\5\0\3\17\1\0\5\17\1\0\21\17\104\0" +
                    "\327\17\51\0\65\17\13\0\336\17\2\0\u0182\17\16\0" +
                    "\u0131\17\37\0\36\17\342\0";
    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\4\1\1\2\5\3\1\2\1\4\1\5\1\6" +
                    "\5\0\1\3\2\0\1\7\3\0\1\10\1\3\2\0" +
                    "\1\3\3\0\6\11\2\0\1\12\2\11\2\0\2\6" +
                    "\1\3\2\11\5\0\1\13\1\6\1\3\2\11\2\14" +
                    "\1\0\4\11\2\0\1\6\1\3\2\11\1\14\1\0" +
                    "\2\11\1\6\1\3\2\11\1\14\1\0\2\11\1\6" +
                    "\1\3\2\11\1\14\1\0\2\11\1\6\1\3\2\11" +
                    "\1\14\1\0\2\11\1\6\1\3\2\11\1\14\1\0" +
                    "\2\11\1\6\1\0\2\11\1\14\1\0\2\11\1\6" +
                    "\3\0\1\14\1\0\2\11\3\0\1\14\1\0\2\11" +
                    "\5\0\1\3\4\0\2\11\3\0\1\14";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a" +
                    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\162\0\u0214" +
                    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\162\0\u02f8\0\46" +
                    "\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428" +
                    "\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558" +
                    "\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688" +
                    "\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8" +
                    "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8" +
                    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18" +
                    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48" +
                    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78" +
                    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8" +
                    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8" +
                    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008" +
                    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138" +
                    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268" +
                    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398" +
                    "\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8" +
                    "\0\u14ee\0\u1514\0\u1456\0\u153a\0\u1560\0\u1586\0\u1560";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\2\2\1\0\1\3\1\2\1\4\1\2\1\5\4\2" +
                    "\1\6\1\4\1\7\1\10\1\11\2\10\1\12\1\10" +
                    "\1\13\7\10\1\2\1\7\3\10\1\14\1\15\1\16" +
                    "\1\2\47\0\1\2\62\0\17\17\1\0\4\17\33\0" +
                    "\1\20\10\0\1\21\16\0\1\22\2\23\1\6\1\24" +
                    "\17\25\1\23\4\25\1\14\1\15\1\16\6\0\1\26" +
                    "\1\27\1\0\1\30\1\31\1\32\1\33\1\25\1\34" +
                    "\17\35\1\32\4\35\3\0\1\30\5\0\1\26\1\27" +
                    "\2\0\1\31\1\32\1\33\1\25\1\34\17\35\1\32" +
                    "\4\35\10\0\1\30\1\26\1\27\1\0\1\36\1\31" +
                    "\1\32\1\33\1\25\1\34\17\35\1\32\4\35\3\0" +
                    "\1\37\4\0\1\30\1\26\1\27\2\0\1\31\1\32" +
                    "\1\33\1\25\1\34\17\35\1\32\4\35\11\0\1\26" +
                    "\1\27\2\0\1\31\1\32\1\33\1\25\1\34\13\35" +
                    "\1\40\3\35\1\32\4\35\20\0\1\14\25\0\1\14" +
                    "\17\0\1\15\26\0\1\15\16\0\1\16\27\0\1\16" +
                    "\26\0\1\41\11\0\1\42\45\0\1\43\22\0\1\44" +
                    "\1\0\7\45\1\46\7\45\1\0\4\45\20\0\1\47" +
                    "\1\0\7\50\1\51\7\50\1\0\4\50\20\0\1\52" +
                    "\1\0\7\52\1\53\7\52\1\0\4\52\15\0\1\22" +
                    "\2\23\1\25\1\24\17\25\1\23\4\25\22\0\17\54" +
                    "\1\0\4\54\20\0\1\55\1\0\17\31\1\0\4\31" +
                    "\20\0\1\56\1\0\17\57\1\0\4\57\20\0\1\56" +
                    "\1\0\17\60\1\0\4\60\20\0\1\52\1\0\7\61" +
                    "\1\62\7\61\1\0\4\61\11\0\1\26\1\27\2\0" +
                    "\1\31\2\32\1\25\1\34\17\35\1\32\4\35\14\0" +
                    "\1\30\102\0\1\30\5\0\1\26\1\27\2\0\1\31" +
                    "\2\32\1\25\1\34\13\35\1\63\3\35\1\32\4\35" +
                    "\40\0\1\30\45\0\1\30\4\0\1\30\45\0\1\30" +
                    "\15\0\3\22\1\44\1\0\17\44\1\22\4\44\15\0" +
                    "\3\31\1\44\1\0\17\45\1\31\4\45\15\0\3\31" +
                    "\1\44\1\0\13\45\1\64\3\45\1\31\4\45\15\0" +
                    "\1\22\2\23\1\47\1\24\17\47\1\23\4\47\15\0" +
                    "\1\31\2\32\1\47\1\24\17\50\1\32\4\50\15\0" +
                    "\1\31\2\32\1\47\1\24\13\50\1\65\3\50\1\32" +
                    "\4\50\16\0\2\66\1\52\1\0\17\52\1\0\4\52" +
                    "\16\0\2\66\1\52\1\0\13\52\1\67\3\52\1\0" +
                    "\4\52\12\0\1\27\7\0\17\54\1\0\4\54\15\0" +
                    "\3\70\1\55\1\0\17\55\1\70\4\55\15\0\1\70" +
                    "\2\71\1\56\1\24\17\56\1\71\4\56\16\0\2\72" +
                    "\1\56\1\24\17\57\1\72\4\57\16\0\1\72\1\73" +
                    "\1\56\1\24\17\57\1\72\4\57\16\0\2\66\1\52" +
                    "\1\0\17\61\1\0\4\61\16\0\2\66\1\52\1\0" +
                    "\13\61\1\74\3\61\1\0\4\61\11\0\1\26\1\27" +
                    "\2\0\1\31\2\32\1\25\1\34\4\35\1\75\12\35" +
                    "\1\32\4\35\15\0\3\31\1\44\1\0\13\45\1\76" +
                    "\3\45\1\31\4\45\15\0\1\31\2\32\1\47\1\24" +
                    "\13\50\1\77\3\50\1\32\4\50\20\0\1\100\1\0" +
                    "\7\100\1\101\7\100\1\0\4\100\16\0\2\66\1\52" +
                    "\1\0\13\52\1\102\3\52\1\0\4\52\20\0\1\103" +
                    "\1\0\7\103\1\104\7\103\1\0\4\103\20\0\1\105" +
                    "\1\0\7\105\1\106\7\105\1\0\4\105\20\0\1\107" +
                    "\1\0\17\107\1\0\4\107\20\0\1\107\1\0\17\110" +
                    "\1\0\4\110\16\0\2\66\1\52\1\0\13\61\1\111" +
                    "\3\61\1\0\4\61\11\0\1\26\1\27\2\0\1\31" +
                    "\2\32\1\25\1\34\6\35\1\112\10\35\1\32\4\35" +
                    "\15\0\3\31\1\44\1\0\4\45\1\113\12\45\1\31" +
                    "\4\45\15\0\1\31\2\32\1\47\1\24\4\50\1\114" +
                    "\12\50\1\32\4\50\16\0\2\66\1\100\1\0\17\100" +
                    "\1\0\4\100\16\0\2\66\1\100\1\0\13\100\1\115" +
                    "\3\100\1\0\4\100\16\0\2\66\1\52\1\0\4\52" +
                    "\1\116\12\52\1\0\4\52\15\0\3\31\1\103\1\0" +
                    "\17\103\1\31\4\103\15\0\3\31\1\103\1\0\13\103" +
                    "\1\117\3\103\1\31\4\103\15\0\1\31\2\32\1\105" +
                    "\1\24\17\105\1\32\4\105\15\0\1\31\2\32\1\105" +
                    "\1\24\13\105\1\120\3\105\1\32\4\105\16\0\2\72" +
                    "\1\107\1\24\17\107\1\72\4\107\16\0\1\72\1\73" +
                    "\1\107\1\24\17\107\1\72\4\107\16\0\2\66\1\52" +
                    "\1\0\4\61\1\121\12\61\1\0\4\61\11\0\1\26" +
                    "\1\27\2\0\1\31\2\32\1\25\1\34\14\35\1\122" +
                    "\2\35\1\32\4\35\15\0\3\31\1\44\1\0\6\45" +
                    "\1\123\10\45\1\31\4\45\15\0\1\31\2\32\1\47" +
                    "\1\24\6\50\1\124\10\50\1\32\4\50\16\0\2\66" +
                    "\1\100\1\0\13\100\1\125\3\100\1\0\4\100\16\0" +
                    "\2\66\1\52\1\0\6\52\1\126\10\52\1\0\4\52" +
                    "\15\0\3\31\1\103\1\0\13\103\1\127\3\103\1\31" +
                    "\4\103\15\0\1\31\2\32\1\105\1\24\13\105\1\130" +
                    "\3\105\1\32\4\105\16\0\2\66\1\52\1\0\6\61" +
                    "\1\131\10\61\1\0\4\61\11\0\1\26\1\27\2\0" +
                    "\1\31\2\32\1\25\1\34\10\35\1\132\6\35\1\32" +
                    "\4\35\15\0\3\31\1\44\1\0\14\45\1\133\2\45" +
                    "\1\31\4\45\15\0\1\31\2\32\1\47\1\24\14\50" +
                    "\1\134\2\50\1\32\4\50\16\0\2\66\1\100\1\0" +
                    "\4\100\1\135\12\100\1\0\4\100\16\0\2\66\1\52" +
                    "\1\0\14\52\1\136\2\52\1\0\4\52\15\0\3\31" +
                    "\1\103\1\0\4\103\1\137\12\103\1\31\4\103\15\0" +
                    "\1\31\2\32\1\105\1\24\4\105\1\140\12\105\1\32" +
                    "\4\105\16\0\2\66\1\52\1\0\14\61\1\141\2\61" +
                    "\1\0\4\61\11\0\1\26\1\27\2\0\1\31\2\32" +
                    "\1\25\1\34\1\142\16\35\1\32\4\35\15\0\3\31" +
                    "\1\44\1\0\10\45\1\143\6\45\1\31\4\45\15\0" +
                    "\1\31\2\32\1\47\1\24\10\50\1\144\6\50\1\32" +
                    "\4\50\16\0\2\66\1\100\1\0\6\100\1\145\10\100" +
                    "\1\0\4\100\16\0\2\66\1\52\1\0\10\52\1\146" +
                    "\6\52\1\0\4\52\15\0\3\31\1\103\1\0\6\103" +
                    "\1\147\10\103\1\31\4\103\15\0\1\31\2\32\1\105" +
                    "\1\24\6\105\1\150\10\105\1\32\4\105\16\0\2\66" +
                    "\1\52\1\0\10\61\1\151\6\61\1\0\4\61\11\0" +
                    "\1\26\1\27\2\0\1\31\2\32\1\25\1\34\13\35" +
                    "\1\152\3\35\1\32\4\35\15\0\3\31\1\44\1\0" +
                    "\1\153\16\45\1\31\4\45\15\0\1\31\2\32\1\47" +
                    "\1\24\1\154\16\50\1\32\4\50\16\0\2\66\1\100" +
                    "\1\0\14\100\1\155\2\100\1\0\4\100\16\0\2\66" +
                    "\1\52\1\0\1\156\16\52\1\0\4\52\15\0\3\31" +
                    "\1\103\1\0\14\103\1\157\2\103\1\31\4\103\15\0" +
                    "\1\31\2\32\1\105\1\24\14\105\1\160\2\105\1\32" +
                    "\4\105\16\0\2\66\1\52\1\0\1\161\16\61\1\0" +
                    "\4\61\11\0\1\26\1\27\2\0\1\31\2\32\1\25" +
                    "\1\34\17\35\1\162\4\35\15\0\3\31\1\44\1\0" +
                    "\13\45\1\163\3\45\1\31\4\45\15\0\1\31\2\32" +
                    "\1\47\1\24\13\50\1\164\3\50\1\32\4\50\16\0" +
                    "\2\66\1\100\1\0\10\100\1\165\6\100\1\0\4\100" +
                    "\16\0\2\66\1\52\1\0\13\52\1\166\3\52\1\0" +
                    "\4\52\15\0\3\31\1\103\1\0\10\103\1\167\6\103" +
                    "\1\31\4\103\15\0\1\31\2\32\1\105\1\24\10\105" +
                    "\1\170\6\105\1\32\4\105\16\0\2\66\1\52\1\0" +
                    "\13\61\1\171\3\61\1\0\4\61\20\0\1\56\1\0" +
                    "\15\57\1\172\1\57\1\0\4\57\15\0\3\31\1\44" +
                    "\1\0\17\45\1\173\4\45\15\0\1\31\2\32\1\47" +
                    "\1\24\17\50\1\174\4\50\16\0\2\66\1\100\1\0" +
                    "\1\175\16\100\1\0\4\100\16\0\2\66\1\52\1\0" +
                    "\17\52\1\176\4\52\15\0\3\31\1\103\1\0\1\177" +
                    "\16\103\1\31\4\103\15\0\1\31\2\32\1\105\1\24" +
                    "\1\200\16\105\1\32\4\105\16\0\2\66\1\52\1\0" +
                    "\17\61\1\176\4\61\16\0\2\72\1\56\1\24\12\57" +
                    "\1\201\4\57\1\72\4\57\20\0\1\55\1\0\15\31" +
                    "\1\202\1\31\1\0\4\31\20\0\1\56\1\0\15\57" +
                    "\1\203\1\57\1\0\4\57\16\0\2\66\1\100\1\0" +
                    "\13\100\1\204\3\100\1\0\4\100\37\0\1\205\23\0" +
                    "\3\31\1\103\1\0\13\103\1\206\3\103\1\31\4\103" +
                    "\15\0\1\31\2\32\1\105\1\24\13\105\1\207\3\105" +
                    "\1\32\4\105\16\0\2\72\1\56\1\24\13\57\1\210" +
                    "\3\57\1\72\4\57\20\0\1\55\1\0\12\31\1\211" +
                    "\4\31\1\0\4\31\16\0\2\72\1\56\1\24\12\57" +
                    "\1\212\4\57\1\72\4\57\16\0\2\66\1\100\1\0" +
                    "\17\100\1\213\4\100\34\0\1\214\26\0\3\31\1\103" +
                    "\1\0\17\103\1\173\4\103\15\0\1\31\2\32\1\105" +
                    "\1\24\17\105\1\174\4\105\16\0\2\72\1\56\1\24" +
                    "\3\57\1\215\13\57\1\72\4\57\20\0\1\55\1\0" +
                    "\13\31\1\216\3\31\1\0\4\31\16\0\2\72\1\56" +
                    "\1\24\13\57\1\217\3\57\1\72\4\57\37\0\1\220" +
                    "\43\0\1\221\25\0\1\31\2\32\1\56\1\24\17\57" +
                    "\1\32\4\57\20\0\1\55\1\0\3\31\1\222\13\31" +
                    "\1\0\4\31\16\0\2\72\1\56\1\24\3\57\1\223" +
                    "\13\57\1\72\4\57\34\0\1\224\36\0\1\225\35\0" +
                    "\3\31\1\55\1\0\24\31\35\0\1\226\26\0\2\66" +
                    "\53\0\1\227\24\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /** Error code for "Unknown internal scanner error". */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /** Error code for "could not match input". */
    private static final int ZZ_NO_MATCH = 1;
    /** Error code for "pushback value was too large". */
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\15\1\5\0\1\1\2\0\1\11\3\0" +
                    "\2\1\2\0\1\1\3\0\6\1\2\0\3\1\2\0" +
                    "\5\1\5\0\7\1\1\0\4\1\2\0\5\1\1\0" +
                    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0" +
                    "\3\1\1\0\3\1\1\0\3\1\3\0\1\1\1\0" +
                    "\2\1\3\0\1\1\1\0\2\1\5\0\1\1\4\0" +
                    "\2\1\3\0\1\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /** Input device. */
    private java.io.Reader zzReader;

    /** Current state of the DFA. */
    private int zzState;

    /** Current lexical state. */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

    /** Text position at the last accepting state. */
    private int zzMarkedPos;

    /** Current text position in the buffer. */
    private int zzCurrentPos;

    /** Marks the beginning of the {@link #yytext()} string in the buffer. */
    private int zzStartRead;

    /** Marks the last character in the buffer, that has been read from input. */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /** Number of characters from the last newline up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yycolumn;

    /** Number of characters up to the start of the matched text. */
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /* user code: */

    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    IndicTokenizerImpl(final java.io.Reader in) {
        this.zzReader = in;
    }

    private static int[] zzUnpackcmap_top() {
        final int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(final String packed, final int offset, final int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            final int value = packed.charAt(i++);
          do {
            result[j++] = value;
          } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackcmap_blocks() {
        final int[] result = new int[28416];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(final String packed, final int offset, final int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            final int value = packed.charAt(i++);
          do {
            result[j++] = value;
          } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAction() {
        final int[] result = new int[151];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(final String packed, final int offset, final int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            final int value = packed.charAt(i++);
          do {
            result[j++] = value;
          } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        final int[] result = new int[151];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(final String packed, final int offset, final int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            final int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        final int[] result = new int[5548];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(final String packed, final int offset, final int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
          do {
            result[j++] = value;
          } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        final int[] result = new int[151];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(final String packed, final int offset, final int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            final int value = packed.charAt(i++);
          do {
            result[j++] = value;
          } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(final int input) {
        final int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(final int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (final ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    public final int yychar() {
        return (int) yychar;
    }

    /**
     * Fills Lucene token with the current token text.
     */
    final void getText(final Token t) {
        t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            final char[] newBuffer = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        final int requested = zzBuffer.length - zzEndRead;
        final int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    final int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(final java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }

    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }

    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(final int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    public final char yycharat(final int position) {
        return zzBuffer[zzStartRead + position];
    }

    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *     {@link #yylength()}.
     */
    public void yypushback(final int number) {
      if (number > yylength()) {
        zzScanError(ZZ_PUSHBACK_2BIG);
      }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.IOException if any I/O-Error occurs.
     */
    public int getNextToken() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        final int[] zzTransL = ZZ_TRANS;
        final int[] zzRowMapL = ZZ_ROWMAP;
        final int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        final boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    final int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                  if (zzNext == -1) {
                    break zzForAction;
                  }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                      if ((zzAttributes & 8) == 8) {
                        break zzForAction;
                      }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: { /* ignore */
                    }
                    // fall through
                    case 13:
                        break;
                    case 2: {
                        return HINDI_WORD;
                    }
                    // fall through
                    case 14:
                        break;
                    case 3: {
                        return ALPHANUM;
                    }
                    // fall through
                    case 15:
                        break;
                    case 4: {
                        return INDIC_WORD;
                    }
                    // fall through
                    case 16:
                        break;
                    case 5: {
                        return CJ_WORD;
                    }
                    // fall through
                    case 17:
                        break;
                    case 6: {
                        return COMPANY;
                    }
                    // fall through
                    case 18:
                        break;
                    case 7: {
                        return IRREGULAR_WORD;
                    }
                    // fall through
                    case 19:
                        break;
                    case 8: {
                        return TRAILING_AT;
                    }
                    // fall through
                    case 20:
                        break;
                    case 9: {
                        return NUM;
                    }
                    // fall through
                    case 21:
                        break;
                    case 10: {
                        return APOSTROPHE;
                    }
                    // fall through
                    case 22:
                        break;
                    case 11: {
                        return ACRONYM;
                    }
                    // fall through
                    case 23:
                        break;
                    case 12: {
                        return EMAIL;
                    }
                    // fall through
                    case 24:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
